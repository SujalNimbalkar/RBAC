AWSTemplateFormatVersion: '2010-09-09'
Description: 'RBAC3 Production Planning System - EC2 Infrastructure'

Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  InstanceType:
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
    Description: EC2 instance type

  NodePort:
    Type: Number
    Default: 3000
    Description: Port for Node.js application
    MinValue: 1024
    MaxValue: 65535

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: RBAC3-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: RBAC3-IGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: RBAC3-Public-Subnet

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: RBAC3-RouteTable

  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  # Security Groups
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
                 - IpProtocol: tcp
           FromPort: !Ref NodePort
           ToPort: !Ref NodePort
           CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2 AMI (us-east-1)
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y git
          
          # Install Node.js 18
          curl -fsSL https://rpm.nodesource.com/setup_18.x | bash -
          yum install -y nodejs
          
          # Install PM2
          npm install -g pm2
          
          # Create application directory
          mkdir -p /var/www/rbac3
          cd /var/www/rbac3
          
          # Clone repository
          git clone https://github.com/SujalNimbalkar/RBAC.git .
          
          # Install dependencies and build
          npm install
          cd frontend && npm install && npm run build && cd ..
          cd backend && npm install && npm run build && cd ..
          
          # Create environment file
          cat > .env << 'ENVEOF'
          MONGODB_URI=mongodb+srv://your-username:your-password@your-cluster.mongodb.net/your-database
          FIREBASE_PROJECT_ID=your-firebase-project-id
          FIREBASE_PRIVATE_KEY=-----BEGIN PRIVATE KEY-----\nYOUR_PRIVATE_KEY_HERE\n-----END PRIVATE KEY-----\n
          FIREBASE_CLIENT_EMAIL=firebase-adminsdk-xxxxx@your-project.iam.gserviceaccount.com
          JWT_SECRET=your-jwt-secret-key-here
          NODE_ENV=production
          PORT=${NodePort}
          NODE_PORT=${NodePort}
          NGINX_PORT=80
          TZ=Asia/Kolkata
          ENVEOF
          
          # Create PM2 ecosystem file
          cat > ecosystem.config.js << 'ECOSYSTEMEOF'
          module.exports = {
            apps: [{
              name: 'rbac3-production-planning',
              script: 'backend/dist/server.js',
              instances: 'max',
              exec_mode: 'cluster',
              env: {
                NODE_ENV: 'production',
                PORT: ${NodePort}
              },
              env_file: '.env'
            }]
          };
          ECOSYSTEMEOF
          
          # Start application
          pm2 start ecosystem.config.js
          pm2 save
          pm2 startup
          
          # Install and configure Nginx
          yum install -y nginx
          systemctl start nginx
          systemctl enable nginx
          
          # Configure Nginx
          cat > /etc/nginx/conf.d/rbac3.conf << 'NGINXEOF'
          server {
              listen 80;
              server_name _;
              
              location /api/ {
                  proxy_pass http://localhost:${NodePort};
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_cache_bypass \$http_upgrade;
              }
              
              location /static/ {
                  alias /var/www/rbac3/frontend/build/static/;
                  expires 1y;
              }
              
              location / {
                  root /var/www/rbac3/frontend/build;
                  try_files \$uri \$uri/ /index.html;
              }
          }
          NGINXEOF
          
          # Reload Nginx
          nginx -t && systemctl reload nginx
          
          # Configure firewall
          yum install -y firewalld
          systemctl start firewalld
          systemctl enable firewalld
          firewall-cmd --permanent --add-service=http
          firewall-cmd --permanent --add-service=https
          firewall-cmd --permanent --add-port=${NodePort}/tcp
          firewall-cmd --reload
      Tags:
        - Key: Name
          Value: RBAC3-Production-Server

  # IAM Role for EC2
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

Outputs:
  InstancePublicDNS:
    Description: Public DNSName of the instance
    Value: !GetAtt EC2Instance.PublicDnsName

  InstancePublicIP:
    Description: Public IP address of the instance
    Value: !GetAtt EC2Instance.PublicIp

  ApplicationURL:
    Description: URL of the application
    Value: !Sub "http://${EC2Instance.PublicDnsName}" 